{
  "info": {
    "_postman_id": "07f84abe-59a8-4266-b4e0-a8fd922548df",
    "name": "PESTI-BE",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "17877685"
  },
  "item": [
    {
      "name": "user",
      "item": [
        {
          "name": "Fail log in (unadded e-mail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(`Response status is 404`, () => pm.response.to.have.status(404));\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "/** * Secure Hash Algorithm (SHA256) * http://www.webtoolkit.info/ * Original code by Angel Marin, Paul Johnston **/ function SHA256(s){ var chrsz = 8; var hexcase = 0; function safe_add (x, y) { var lsw = (x & 0xFFFF) + (y & 0xFFFF); var msw = (x >> 16) + (y >> 16) + (lsw >> 16); return (msw << 16) | (lsw & 0xFFFF); } function S (X, n) { return ( X >>> n ) | (X << (32 - n)); } function R (X, n) { return ( X >>> n ); } function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); } function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); } function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); } function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); } function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); } function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); } function core_sha256 (m, l) { var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2); var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19); var W = new Array(64); var a, b, c, d, e, f, g, h, i, j; var T1, T2; m[l >> 5] |= 0x80 << (24 - l % 32); m[((l + 64 >> 9) << 4) + 15] = l; for ( var i = 0; i<m.length; i+=16 ) { a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7]; for ( var j = 0; j<64; j++) { if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]); T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]); T2 = safe_add(Sigma0256(a), Maj(a, b, c)); h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2); } HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]); HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]); } return HASH; } function str2binb (str) { var bin = Array(); var mask = (1 << chrsz) - 1; for(var i = 0; i < str.length * chrsz; i += chrsz) { bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32); } return bin; } function Utf8Encode(string) { string = string.replace(/\\r\\n/g,'\\n'); var utftext = ''; for (var n = 0; n < string.length; n++) { var c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c); } else if((c > 127) && (c < 2048)) { utftext += String.fromCharCode((c >> 6) | 192); utftext += String.fromCharCode((c & 63) | 128); } else { utftext += String.fromCharCode((c >> 12) | 224); utftext += String.fromCharCode(((c >> 6) & 63) | 128); utftext += String.fromCharCode((c & 63) | 128); } } return utftext; } function binb2hex (binarray) { var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'; var str = ''; for(var i = 0; i < binarray.length * 4; i++) { str += hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8 )) & 0xF); } return str; } s = Utf8Encode(s); return binb2hex(core_sha256(str2binb(s), s.length * chrsz)); }\r",
                  "\r",
                  "\r",
                  "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                  "const domain = Array.from(Array(5), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                  "const randomEmail = `${name}@${domain}.com`;\r",
                  "pm.environment.set(\"wrong_email\", randomEmail);\r",
                  "pm.environment.set(\"wrong_password\", SHA256(name));\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{wrong_email}}\",\r\n    \"password\": \"{{wrong_password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{be}}/api/user/authenticate",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user",
                "authenticate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Fail add user (bad request)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(`Response status is Bad request`, () => pm.response.to.have.status(400));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"any\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{be}}/api/user",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(`Status code is 201`, () => pm.response.to.have.status(201));\r",
                  "\r",
                  "const accessJwt = pm.response.json();\r",
                  "\r",
                  "\r",
                  "const jwtRegex = /^([A-Za-z\\d-_]*\\.){2}[A-Za-z\\d-_]*$/;\r",
                  "pm.test(`Access JWT exists and is valid`, () => {\r",
                  "    pm.expect(accessJwt).to.not.undefined;\r",
                  "    const res = jwtRegex.test(accessJwt);\r",
                  "    pm.expect(res).to.be.true;\r",
                  "    pm.environment.set(`accessJwt`, accessJwt);\r",
                  "});\r",
                  "\r",
                  "const refreshJwtCookie = pm.cookies.find(c => c.name === `refreshJwt`);\r",
                  "pm.test(`Refresh JWT cookie is not HTTPOnly`, () => pm.expect(refreshJwtCookie.httpOnly).to.be.false);\r",
                  "pm.test(`Refresh JWT exists and is valid`, () => {\r",
                  "    pm.expect(refreshJwtCookie.value).to.not.be.undefined;\r",
                  "    pm.expect(jwtRegex.test(refreshJwtCookie.value)).to.be.true;\r",
                  "    pm.environment.set(`refreshJwt`, refreshJwtCookie.value);\r",
                  "    pm.cookies.jar().clear(pm.environment.get(`be`));\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "/** * Secure Hash Algorithm (SHA256) * http://www.webtoolkit.info/ * Original code by Angel Marin, Paul Johnston **/ function SHA256(s){ var chrsz = 8; var hexcase = 0; function safe_add (x, y) { var lsw = (x & 0xFFFF) + (y & 0xFFFF); var msw = (x >> 16) + (y >> 16) + (lsw >> 16); return (msw << 16) | (lsw & 0xFFFF); } function S (X, n) { return ( X >>> n ) | (X << (32 - n)); } function R (X, n) { return ( X >>> n ); } function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); } function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); } function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); } function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); } function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); } function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); } function core_sha256 (m, l) { var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2); var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19); var W = new Array(64); var a, b, c, d, e, f, g, h, i, j; var T1, T2; m[l >> 5] |= 0x80 << (24 - l % 32); m[((l + 64 >> 9) << 4) + 15] = l; for ( var i = 0; i<m.length; i+=16 ) { a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7]; for ( var j = 0; j<64; j++) { if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]); T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]); T2 = safe_add(Sigma0256(a), Maj(a, b, c)); h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2); } HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]); HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]); } return HASH; } function str2binb (str) { var bin = Array(); var mask = (1 << chrsz) - 1; for(var i = 0; i < str.length * chrsz; i += chrsz) { bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32); } return bin; } function Utf8Encode(string) { string = string.replace(/\\r\\n/g,'\\n'); var utftext = ''; for (var n = 0; n < string.length; n++) { var c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c); } else if((c > 127) && (c < 2048)) { utftext += String.fromCharCode((c >> 6) | 192); utftext += String.fromCharCode((c & 63) | 128); } else { utftext += String.fromCharCode((c >> 12) | 224); utftext += String.fromCharCode(((c >> 6) & 63) | 128); utftext += String.fromCharCode((c & 63) | 128); } } return utftext; } function binb2hex (binarray) { var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'; var str = ''; for(var i = 0; i < binarray.length * 4; i++) { str += hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8 )) & 0xF); } return str; } s = Utf8Encode(s); return binb2hex(core_sha256(str2binb(s), s.length * chrsz)); }\r",
                  "\r",
                  "\r",
                  "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');;\r",
                  "const domain = Array.from(Array(5), () => Math.floor(Math.random() * 36).toString(36)).join('');;\r",
                  "const randomEmail = `${name}@${domain}.com`;\r",
                  "pm.environment.set(\"email\", randomEmail);\r",
                  "pm.environment.set(\"password\", SHA256(name));\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\":\"{{email}}\",\r\n  \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{be}}/api/user",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Fail log in (wrong password)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(`Response status is 401`, () => pm.response.to.have.status(401));\r",
                  "\r",
                  "pm.test(`No body`, () => {\r",
                  "    const body = pm.response.body;\r",
                  "    const res = body === undefined || body === {};\r",
                  "    pm.expect(res).to.be.true;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "/** * Secure Hash Algorithm (SHA256) * http://www.webtoolkit.info/ * Original code by Angel Marin, Paul Johnston **/ function SHA256(s){ var chrsz = 8; var hexcase = 0; function safe_add (x, y) { var lsw = (x & 0xFFFF) + (y & 0xFFFF); var msw = (x >> 16) + (y >> 16) + (lsw >> 16); return (msw << 16) | (lsw & 0xFFFF); } function S (X, n) { return ( X >>> n ) | (X << (32 - n)); } function R (X, n) { return ( X >>> n ); } function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); } function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); } function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); } function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); } function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); } function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); } function core_sha256 (m, l) { var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2); var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19); var W = new Array(64); var a, b, c, d, e, f, g, h, i, j; var T1, T2; m[l >> 5] |= 0x80 << (24 - l % 32); m[((l + 64 >> 9) << 4) + 15] = l; for ( var i = 0; i<m.length; i+=16 ) { a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7]; for ( var j = 0; j<64; j++) { if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]); T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]); T2 = safe_add(Sigma0256(a), Maj(a, b, c)); h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2); } HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]); HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]); } return HASH; } function str2binb (str) { var bin = Array(); var mask = (1 << chrsz) - 1; for(var i = 0; i < str.length * chrsz; i += chrsz) { bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32); } return bin; } function Utf8Encode(string) { string = string.replace(/\\r\\n/g,'\\n'); var utftext = ''; for (var n = 0; n < string.length; n++) { var c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c); } else if((c > 127) && (c < 2048)) { utftext += String.fromCharCode((c >> 6) | 192); utftext += String.fromCharCode((c & 63) | 128); } else { utftext += String.fromCharCode((c >> 12) | 224); utftext += String.fromCharCode(((c >> 6) & 63) | 128); utftext += String.fromCharCode((c & 63) | 128); } } return utftext; } function binb2hex (binarray) { var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'; var str = ''; for(var i = 0; i < binarray.length * 4; i++) { str += hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8 )) & 0xF); } return str; } s = Utf8Encode(s); return binb2hex(core_sha256(str2binb(s), s.length * chrsz)); }\r",
                  "\r",
                  "\r",
                  "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                  "pm.environment.set(\"wrong_password\", SHA256(name));\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{wrong_password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{be}}/api/user/authenticate",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user",
                "authenticate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Log in",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(`Response status is OK`, () => pm.response.to.have.status(200));\r",
                  "\r",
                  "// the newly received tokens won't be equal to the ones gotten at register because they are created with timestamps, which impedes the back-end from generating any two identical tokens\r",
                  "\r",
                  "const jwtRegex = /^([A-Za-z\\d-_]*\\.){2}[A-Za-z\\d-_]*$/;\r",
                  "pm.test(`Received access JWT exists and is valid`, () => {\r",
                  "    const jwt = pm.response.json();\r",
                  "    pm.expect(typeof jwt).to.eql(`string`);\r",
                  "    pm.expect(jwtRegex.test(jwt)).to.be.true;\r",
                  "    pm.environment.set(`accessJwt`, jwt);\r",
                  "});\r",
                  "\r",
                  "pm.test(`Received refresh JWT exists and is valid`, () => {\r",
                  "    const thisJwt = pm.cookies.find(c => c.name === \"refreshJwt\").value;\r",
                  "    pm.expect(jwtRegex.test(thisJwt)).to.be.true;\r",
                  "    pm.environment.set(`refreshJwt`, thisJwt);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{be}}/api/user/authenticate",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user",
                "authenticate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(`Response status is Created`, () => pm.response.to.have.status(201));\r",
                  "\r",
                  "const jwtRegex = /^([A-Za-z\\d-_]*\\.){2}[A-Za-z\\d-_]*$/;\r",
                  "pm.test(`Received access JWT exists and is valid`, () => {\r",
                  "    const jwt = pm.response.json();\r",
                  "    pm.expect(typeof jwt).to.eql(`string`);\r",
                  "    pm.expect(jwtRegex.test(jwt)).to.be.true;\r",
                  "    pm.environment.set(`accessJwt`, jwt);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{be}}/api/user/refreshToken",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "user",
                "refreshToken"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "config",
      "item": [
        {
          "name": "Countries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(`Response status is OK`, () => pm.response.to.have.status(200));\r",
                  "\r",
                  "pm.test(`Body is string list`, () => {\r",
                  "    const countries = pm.response.json()\r",
                  "    pm.expect(Array.isArray(countries)).to.be.true;\r",
                  "    countries.forEach(c =>\r",
                  "        pm.expect(typeof c).to.eql('string'));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{be}}/api/config/allcountries",
              "host": [
                "{{be}}"
              ],
              "path": [
                "api",
                "config",
                "allcountries"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "lab",
      "item": [
        {
          "name": "add lab",
          "item": [
            {
              "name": "Missing name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"country\": \"Greece\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Missing country",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                      "pm.environment.set(\"lab_name1\", name);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{lab_name1}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Invalid country",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                      "pm.environment.set(\"lab_name1\", name);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{lab_name1}}\",\r\n    \"country\": \"Somewhere\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Invalid component(s)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                      "pm.environment.set(\"lab_name1\", name);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{lab_name1}}\",\r\n    \"country\": \"Greece\",\r\n    \"components\": [\"Strange component\"]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Successful add",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test('Response status is Created', () => pm.response.to.have.status(201))\r",
                      "\r",
                      "const jsonResp = pm.response.json();\r",
                      "pm.test('Name is correct', () => pm.expect(jsonResp.name).to.eql(pm.environment.get(\"lab_name1\")))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      "const name = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\r",
                      "pm.environment.set(\"lab_name1\", name);\r",
                      "pm.environment.set(\"lab_country1\", \"Greece\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"{{lab_name1}}\",\r\n    \"country\": \"{{lab_country1}}\",\r\n    \"components\":[\"LED\", \"Light Sensor\"]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "getters",
          "item": [
            {
              "name": "Get all labs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(`Response status is OK`, () => pm.response.to.have.status(200));\r",
                      "\r",
                      "const jsonResp = pm.response.json();\r",
                      "\r",
                      "pm.test('Added Lab exists', () => {\r",
                      "    const name = pm.environment.get('lab_name1');\r",
                      "    const res = jsonResp.findIndex(lab => lab.name === name);\r",
                      "    pm.expect(res).to.not.eql(-1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{be}}/api/lab",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Lab by name 200",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is OK', () => pm.response.to.have.status(200))\r",
                      "\r",
                      "const jsonResp = pm.response.json();\r",
                      "\r",
                      "pm.test('Response name is correct', () => pm.expect(jsonResp.name).to.eql(pm.environment.get('lab_name1')));\r",
                      "\r",
                      "pm.test('Response country is correct', () => pm.expect(jsonResp.country).to.eql(pm.environment.get('lab_country1')));\r",
                      "\r",
                      "pm.test('Response components are correct', () => pm.expect(jsonResp.components).to.eql([\"LED\", \"Light Sensor\"]));\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{be}}/api/lab/{{lab_name1}}",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "{{lab_name1}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Lab by name 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is Not Found', () => pm.response.to.have.status(404));\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{be}}/api/lab/abc123",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "abc123"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Labs by country 200",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is OK', () => pm.response.to.have.status(200))\r",
                      "\r",
                      "const jsonResp = pm.response.json();\r",
                      "\r",
                      "pm.test('Response is a list and contains the added Lab', () => {\r",
                      "    const name = pm.environment.get('lab_name1');\r",
                      "    const res = jsonResp.findIndex(lab => lab.name === name);\r",
                      "    pm.expect(res).to.not.eql(-1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{be}}/api/lab/bycountry/{{lab_country1}}",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "bycountry",
                    "{{lab_country1}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Labs by country 400",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400));\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{be}}/api/lab/bycountry/abc123",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "bycountry",
                    "abc123"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Labs by components 200",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is OK', () => pm.response.to.have.status(200))\r",
                      "\r",
                      "const jsonResp = pm.response.json();\r",
                      "\r",
                      "pm.test('Response is a list and contains the added Lab', () => {\r",
                      "    const name = pm.environment.get('lab_name1');\r",
                      "    const res = jsonResp.findIndex(lab => lab.name === name);\r",
                      "    pm.expect(res).to.not.eql(-1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[\"LED\", \"Light Sensor\"]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab/getbycomponents",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "getbycomponents"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Labs by components 400",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status is Bad Request', () => pm.response.to.have.status(400));\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[\r\n    \"Strange Component\"\r\n]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{be}}/api/lab/getbycomponents",
                  "host": [
                    "{{be}}"
                  ],
                  "path": [
                    "api",
                    "lab",
                    "getbycomponents"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ]
}